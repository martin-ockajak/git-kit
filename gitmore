#!/usr/bin/env python3

from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, Sequence, Sized, Union, Tuple, TypeVar
import argparse
import collections
import itertools
import os
import subprocess
import sys


# Parse operation-line arguments
def parse_arguments(arguments: List[str], operations: Dict[str, Tuple[str, str]]) -> str:
  parser = argparse.ArgumentParser(
    usage = '''
  %(prog)s <operation> [arguments] - Perform specified operation.
  %(prog)s <operation> -h          - Display specified operation help.''',
    formatter_class = argparse.ArgumentDefaultsHelpFormatter
  )
  operation_names = operations.keys()
  parser.add_argument(
    'operation',
    metavar = '<operation>',
    nargs = 1,
    choices = operation_names,
    help = f'Available: {", ".join(operation_names)}'
)
  return parser.parse_args(arguments).operation[0]

# Determine script directory.
def get_script_directory() -> str:
  return os.path.dirname(os.path.realpath(__file__))

# Execute command and parse its output into lines without surrounding whitespace or empty lines.
def execute_as_lines(command: List[str]) -> List[str]:
  output = subprocess.check_output(command).decode("utf-8")
  lines = list(itertools.takewhile(lambda line: line, itertools.dropwhile(lambda line: not line, output.split('\n'))))
  return [line.strip() for line in lines]

# Determine default branch.
def get_default_branch() -> str:
  lines = execute_as_lines(['git', 'symbolic-ref', '--short', 'refs/remotes/origin/HEAD'])
  return lines[0].split('/', 1)[1]

# Determine current branch.
def get_current_branch() -> str:
  return execute_as_lines(['git', 'rev-parse', '--abbrev-ref', 'HEAD'])[0]

# Fetch changes to all branches and rebase changes to the current branch
def retrieve_changes(rebase = False) -> None:
  subprocess.check_call(['git', 'fetch', '--all', '--prune', '--prune-tags'])
  merge_options = ['rebase'] if rebase else ['merge', '--no-edit']
  subprocess.check_call(['git'] + merge_options + ['FETCH_HEAD'])

# Publish changes to all branches
def publish_changes(upstream_branch: str = None) -> None:
  set_upstream_option = ['-u', 'origin', upstream_branch] if upstream_branch else []
  subprocess.check_call(['git', 'push'] + set_upstream_option)

# List branches by location or merge state
def list_branches(remote: bool = False, merged_branch: str = None) -> List[str]:
  remote_option = (['-r'] if remote else [])
  merged_option = (['--merged', merged_branch] if merged_branch else [])
  lines = execute_as_lines(['git', 'branch'] + remote_option + merged_option)
  if remote:
    branches = [line.split('/', 1)[1] for line in lines if line and '->' not in line]
  else:
    branches = [line for line in lines if line]
    current_branch = next((branch for branch in branches if branch.startswith('*')), None)
    if current_branch:
      branches.remove(current_branch)
      branches.insert(0, current_branch[1:].strip())
  return branches

# List local branches which track remote branches
def list_local_tracking_branches() -> List[str]:
  lines = execute_as_lines(['git', 'branch', '-lvv'])
  branches = []
  for line in lines:
    fields = line.split()
    if len(fields) > 2:
      if fields[0] == '*':
        fields = fields[1:]
      if fields[2].startswith('[') and (fields[2].endswith(']') or fields[2].endswith(':')):
        branches.append(fields[0])
  return branches

# Create local branches to track specified remote branches
def track_remote_branches(branches: List[str]) -> None:
  for branch in branches:
    subprocess.check_call(['git', 'branch', '-t', branch, f'origin/{branch}'], stdout = subprocess.PIPE)
  if branches:
    branch_list = ''.join(['  %s\n' % branch for branch in branches])
    print(f'Fetched remote branches:\n{branch_list}')

# Delete specified branches
def delete_branches(branches: List[str]) -> None:
  for branch in branches:
    subprocess.check_call(['git', 'branch', '-D', branch], stdout = subprocess.PIPE)
  if branches:
    branch_list = ''.join(['  %s\n' % branch for branch in branches])
    print(f'Deleted local branches:\n{branch_list}')

# Synchronize command.
def synchronize(operation: str, description: str, arguments: List[str]) -> None:
  # Parse arguments
  parser = argparse.ArgumentParser(
    usage = f'%(prog)s {operation}',
    description = description,
    formatter_class = argparse.ArgumentDefaultsHelpFormatter
  )
  parser.add_argument(
    '-a',
    '--all',
    action = "store_true",
    help = 'Synchronize all remote branches.'
  )
  parser.add_argument(
    '-p',
    '--prune',
    action = "store_true",
    help = 'Delete local branches which track non-existent remote branches.'
  )
  options = parser.parse_args(arguments)

  # List branches
  local_branches = list_branches()
  remote_branches = list_branches(remote = True)
  local_tracking_branches = list_local_tracking_branches()
  default_branch = get_default_branch()
  current_branch = next(iter(local_branches), default_branch)

  # Publish current local-only branch
  if current_branch not in local_tracking_branches:
    publish_changes(upstream_branch = current_branch)

  # Track untracked remote branches
  if options.all:
    new_remote_branches = sorted(list(set(remote_branches) - set(local_branches)))
    track_remote_branches(new_remote_branches)

  # Retrieve changes for all branches
  retrieve_changes()

  # Delete local branches tracking non-existent remote branches
  if options.prune:
    old_local_branches = list(set(local_tracking_branches) - set(remote_branches) - set(current_branch))
    delete_branches(old_local_branches)

  # Publish changes to the current branch
  if current_branch in local_tracking_branches:
    publish_changes()

# Amend command.
def amend(operation: str, description: str, arguments: List[str]) -> None:
  subprocess.check_call(['git', 'commit', '--amend', '-C', 'HEAD'])

# Head merge command.
def pullmerge(operation: str, description: str, arguments: List[str]) -> None:
  if not arguments:
    raise Exception('Missing branch name')
  branch = arguments[0]
  current_branch = get_current_branch()
  if branch == current_branch:
    raise Exception('Invalid branch name')
  subprocess.check_call(['git', 'pull'])
  subprocess.check_call(['git', 'checkout', branch])
  subprocess.check_call(['git', 'pull'])
  subprocess.check_call(['git', 'checkout', current_branch])
  subprocess.check_call(['git', 'merge', branch] + arguments[1:])

# Graph log command.
def graphlog(operation: str, description: str, arguments: List[str]) -> None:
  subprocess.check_call(['git', 'log', '--all', '--graph', '--stat', '--pretty=format:%C(ul red)%h%C(reset) -%C(yellow)%d%C(reset) %C(cyan)%s%C(reset) %C(bold blue)<%an>%C(reset) %C(magenta)(%cr)%C(reset)', '--abbrev-commit'] + arguments)

# Branch log command.
def branchlog(operation: str, description: str, arguments: List[str]) -> None:
  branch = arguments[0] if arguments else get_current_branch()
  subprocess.check_call(['git', 'log', '--stat', '--pretty=format:%C(ul red)%h%C(reset) -%C(yellow)%d%C(reset) %C(cyan)%s%C(reset) %C(bold blue)<%an>%C(reset) %C(magenta)(%cr)%C(reset)', '--abbrev-commit', '--first-parent', branch] + arguments[1:])

operations = collections.OrderedDict([
  ('sync', ('Pull changes from all remote branches and push changes to the current branch.', synchronize)),
  ('amend', ('Add staged changes to the last commit.', amend)),
  ('pullmerge', ('Merge the specified branch into the current branch using the last revision of both branches.', pullmerge)),
  ('graphlog', ('Display commit log for all branches as a graph.', graphlog)),
  ('branchlog', ('Display commit log for specified branch only.', branchlog))
])

# More command.
def more(operation: str, description: str, arguments: List[str]) -> None:
  print('Git command aliases invoking GitMore operations:\n')
  for alias, (description, _) in operations.items():
    if alias != 'install':
      print(f'* {alias} - {description}')
  print('''
  git <operation> [arguments] - Perform specified operation.
  git <operation> -h          - Display specified operation help.
''')

# Install into current Git repository.
def install(operation: str, description: str, arguments: List[str]) -> None:
  # Parse arguments
  parser = argparse.ArgumentParser(
    usage = f'%(prog)s {operation} [repository]',
    description = description,
    formatter_class = argparse.ArgumentDefaultsHelpFormatter
  )
  parser.add_argument(
    'repository',
    metavar = 'repository',
    nargs = '?',
    default = '.',
    help = 'Git repository path.'
  )
  options = parser.parse_args(arguments)
  script_path = os.path.abspath(os.path.join(options.repository, '.git', __file__))
  with open(__file__) as source_file:
    source = source_file.read()
    with open(script_path, 'w+') as script_file:
      script_file.write(source)
  for alias, (description, _) in operations.items():
    if alias != operation:
      path = script_path.replace('\\', '\\\\')
      command_line = f'!python3 {path} {alias} $@'
      subprocess.check_call(['git', 'config', f'alias.{alias}', command_line], stdout = subprocess.PIPE)
  more('', '', [])

# Entry point
def main() -> int:
  operations['more'] = ('List Git command aliases invoking GitMore operations.', more)
  operations['install'] = ('Install Git command aliases invoking GitMore operations.', install)
  operation = parse_arguments(sys.argv[1:min(len(sys.argv), 2)], operations)
  operations[operation][1](operation, operations[operation][0], sys.argv[2:])
  return 0

if __name__ == "__main__":
  sys.exit(main())
